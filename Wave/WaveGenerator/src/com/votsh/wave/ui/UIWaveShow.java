/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.votsh.wave.ui;

import com.votsh.wave.effects.WaveEffect;
import com.votsh.wave.entries.LedColor;
import com.votsh.wave.entries.Wave;
import com.votsh.wave.generators.GridGenerator;
import com.votsh.wave.util.FileManager;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;

/**
 *
 * @author Luis
 */
public class UIWaveShow extends javax.swing.JPanel {

    private final static int inchToPixel = 5;

    private final ArrayList<InterpolationGenerator> generators;

    private JFrame frame;

    /**
     * Creates new form UIWaveManager
     */
    public UIWaveShow() {
        initComponents();
        setDoubleBuffered(true);
        generators = new ArrayList<>();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        try {
            for (InterpolationGenerator it : generators) {
                fillWave(it, g);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void fillWave(InterpolationGenerator w, Graphics g) throws Exception {

        LedColor[] colors = w.generateCurrentColors();
        for (int i = 0; i < Wave.size; i++) {
            for (int j = 0; j < Wave.size; j++) {
                int lednumber = i * Wave.size + j;
                LedColor rgb = colors[lednumber];
                
                g.setColor(new Color((float) Math.min(1.0,rgb.r),
                         (float)Math.min(1.0,rgb.g), 
                        (float)Math.min(1.0,rgb.b)));
                int x = w.wave.X * inchToPixel + i * 11;
                int y = w.wave.Y * inchToPixel + j * 11;
                g.fillRect(x, y,10, 10);
            }
        }
    }

    private void deploUI() throws Exception {
        frame = new JFrame();
        frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        this.setBackground(new java.awt.Color(255, 255, 255));
        javax.swing.GroupLayout canvaLayout = new javax.swing.GroupLayout(this);
        this.setLayout(canvaLayout);
        canvaLayout.setHorizontalGroup(
                canvaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 542, Short.MAX_VALUE)
        );
        canvaLayout.setVerticalGroup(
                canvaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 422, Short.MAX_VALUE)
        );
        frame.getContentPane().add(this, java.awt.BorderLayout.CENTER);
        frame.pack();
        frame.setVisible(true);
        new Thread() {
            @Override
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(10);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    frame.repaint();
                }
            }
        }.start();
    }

    public void generateShow() throws Exception {

        GridGenerator wg = new GridGenerator();
        wg.setup(10, 10, 2, 2, 0);
        ArrayList<Wave> waves = wg.generateWaves();
        HashMap<String, Object> config = new HashMap<>();

        config.put("centerX", 40);
        config.put("centerY", 40);
        config.put("speed", 20.0);
        config.put("length", 30);
        config.put("total", 10);

        WaveEffect we = new WaveEffect();
        we.setup(config);
        we.applyEffect(waves);
        FileManager.saveToFile(waves, "waves.json");
        //System.exit(0);

        long initTime = System.currentTimeMillis();
        for (Wave wave : waves) {
            // wave.trimTimelines(30*10*10000);
            InterpolationGenerator it = new InterpolationGenerator(initTime);
            generators.add(it);
            it.setup(wave);

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }

        UIWaveShow ui = new UIWaveShow();
        ui.generateShow();
        ui.deploUI();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
